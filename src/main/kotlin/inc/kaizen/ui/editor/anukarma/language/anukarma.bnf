{
  parserClass="inc.kaizen.ui.editor.anukarma.language.AnukarmaParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Anukarma"
  psiImplClassSuffix="Impl"
  psiPackage="inc.kaizen.ui.editor.anukarma.language"
  psiImplPackage="inc.kaizen.ui.editor.anukarma.language.impl"

  elementTypeHolderClass="inc.kaizen.ui.editor.anukarma.language.IAnukarmaLanguageFileType"
  elementTypeClass="inc.kaizen.ui.editor.anukarma.language.AnukarmaElementType"
  tokenTypeClass="inc.kaizen.ui.editor.anukarma.language.AnukarmaTokenType"

  tokens=[
      EOL=";"
      SEPARATOR='='
      OPEN_BRACKET='{'
      CLOSE_BRACKET='}'
//      CRLF='regexp:\n'
//      SPACE='regexp:[ \t]+'
      LPAR='('
      RPAR=')'
      DOT='.'
      QUOTE='"'
      BOOLEAN='regexp:([Tt][Rr][Uu][Ee]|[Ff][Aa][Ll][Ss][Ee])'
      NUMBER='regexp:(\d+)'
      IDENTIFIER='regexp:(\w+)'
      GROUP_NAME='regexp:([a-zA-Z0-9_]+)'
      FILE_PATH='regexp:([a-zA-Z0-9_./\\]+.karma)'
      IMPLEMENTATION_CLASS='regexp:([a-z][a-zA-Z0-9_]*(\.[a-zA-Z0-9_]+)+[0-9A-Za-z_])'
      COMMENT='regexp:(//.*)'
      BLOCK_COMMENT='regexp:(/\*{1,2} [^*/]* \*/)'
      WHITESPACES='regexp:[\n\r\s]*'
//      SPACE='regexp:\s*'
    ]
}

anukarma ::= CONTENT*

CONTENT ::= (PROPERTY|COMMENT|BLOCK_COMMENT|WHITESPACES|PLUGIN_SECTION|EXTENSION_SECTION|TASK_SECTION|FEATURE_SECTION)

//WHITESPACES ::= (SPACE|CRLF)+

SPACES ::= WHITESPACES*

PROPERTY ::= (KEY SPACES SEPARATOR SPACES VALUE)
KEY ::= stopOnFail | incremental | generateCode
VALUE ::= BOOLEAN

PLUGIN_SECTION ::= plugins SPACES OPEN_BRACKET (WHITESPACES|PLUGIN_ID)* CLOSE_BRACKET
PLUGIN_ID ::= id SPACES LPAR SPACES QUOTE SPACES PLUGIN_ID_VALUE SPACES QUOTE SPACES RPAR
PLUGIN_ID_VALUE ::= IDENTIFIER

EXTENSION_SECTION ::= (extensions SPACES OPEN_BRACKET (WHITESPACES|EXTENSION_FILE)* CLOSE_BRACKET)
EXTENSION_FILE ::= (file SPACES LPAR SPACES QUOTE SPACES EXTENSION_FILE_VALUE SPACES QUOTE SPACES RPAR)
EXTENSION_FILE_VALUE ::= FILE_PATH

TASK_SECTION ::= (task SPACES LPAR SPACES QUOTE SPACES IDENTIFIER SPACES QUOTE SPACES RPAR SPACES OPEN_BRACKET (TASK_CONTENT)* CLOSE_BRACKET)
TASK_CONTENT ::= WHITESPACES|COMMENT|BLOCK_COMMENT| TASK_PROPERTIES | TASK_DEPENDENCY
TASK_PROPERTIES ::= TASK_PROPERTY_IMPLEMENTATION | TASK_PROPERTY_GROUP | TASK_PROPERTY_STRICT_DEPENDENCY
TASK_PROPERTY_IMPLEMENTATION ::= (implementation SPACES SEPARATOR SPACES QUOTE SPACES IMPLEMENTATION_CLASS SPACES QUOTE)
TASK_PROPERTY_GROUP ::= (group SPACES SEPARATOR SPACES QUOTE SPACES IDENTIFIER SPACES QUOTE)
TASK_PROPERTY_STRICT_DEPENDENCY ::= (strictDependency SPACES SEPARATOR SPACES BOOLEAN)
TASK_DEPENDENCY ::= dependsOn SPACES OPEN_BRACKET (WHITESPACES|TASK_DEPENDENCY_ID)* CLOSE_BRACKET
TASK_DEPENDENCY_ID ::= id SPACES LPAR SPACES QUOTE SPACES TASK_DEPENDENCY_ID_VALUE SPACES QUOTE SPACES RPAR
TASK_DEPENDENCY_ID_VALUE ::= IDENTIFIER

FEATURE_SECTION ::= feature SPACES LPAR SPACES QUOTE SPACES IDENTIFIER SPACES QUOTE SPACES RPAR SPACES OPEN_BRACKET (FEATURE_CONTENT)* CLOSE_BRACKET
FEATURE_CONTENT ::= (WHITESPACES|COMMENT|BLOCK_COMMENT|FEATURE_PROPERTIES|FEATURE_DEPENDENCY|TASK_SECTION)
FEATURE_PROPERTIES ::= FEATURE_PROPERTY_PRIORITY
FEATURE_PROPERTY_PRIORITY ::= (priority SPACES SEPARATOR SPACES NUMBER)
FEATURE_DEPENDENCY ::= dependsOn SPACES OPEN_BRACKET (WHITESPACES|FEATURE_DEPENDENCY_ID)* CLOSE_BRACKET
FEATURE_DEPENDENCY_ID ::= id SPACES LPAR SPACES QUOTE SPACES FEATURE_DEPENDENCY_ID_VALUE SPACES QUOTE SPACES RPAR
FEATURE_DEPENDENCY_ID_VALUE ::= IDENTIFIER